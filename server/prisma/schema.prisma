// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProjectRole {
  PROJECT_MANAGER
  TEAM_LEAD
  DEVELOPER
  TESTER
}

enum WokspaceRole {
  OWNER
  CONTRIBUTOR
}

model User {
  id                Int     @id @default(autoincrement())
  email             String  @unique
  cognitoId         String  @unique
  username          String  @unique
  profilePictureUrl String?

  worskapces     WorkspaceMembers[]
  teams          Team[]
  authoredTasks  Task[]             @relation("TaskAuthor")
  assignedTasks  Task[]             @relation("TaskAssignee")
  attachments    Attachment[]
  comments       Comment[]
  ProjectMembers ProjectMembers[]
}

model ProjectMembers {
  userId    String
  projectId Int
  role      ProjectRole

  project Project @relation(references: [id], fields: [projectId])
  member  User    @relation(references: [email], fields: [userId])

  @@id([userId, projectId])
}

model WorkspaceMembers {
  userId      String
  workspaceId Int
  role        WokspaceRole

  user     User      @relation(references: [email], fields: [userId])
  wokspace Workspace @relation(references: [id], fields: [workspaceId])

  @@id([userId, workspaceId])
}

model Workspace {
  id   Int    @id @default(autoincrement())
  name String

  projects Project[]
  users    WorkspaceMembers[]
}

model Project {
  id          Int     @id @default(autoincrement())
  name        String
  workspaceId Int
  description String?
  version     String
  teams       Team[]
  tasks       Task[]

  workspace      Workspace        @relation(fields: [workspaceId], references: [id])
  ProjectMembers ProjectMembers[]
}

model Team {
  id        Int    @id @default(autoincrement())
  name      String
  projectId Int

  users   User[]
  project Project @relation(references: [id], fields: [projectId])
  Task    Task[]
}

model Task {
  id             Int       @id @default(autoincrement())
  title          String
  description    String?
  status         String?
  priority       String?
  tags           String?
  startDate      DateTime?
  dueDate        DateTime?
  points         Int?
  projectId      Int
  teamId         Int?
  authorUserId   String
  assignedUserId String?

  team        Team?        @relation(fields: [teamId], references: [id])
  project     Project      @relation(fields: [projectId], references: [id])
  author      User         @relation("TaskAuthor", fields: [authorUserId], references: [email])
  assignee    User?        @relation("TaskAssignee", fields: [assignedUserId], references: [email])
  attachments Attachment[]
  comments    Comment[]
}

model Attachment {
  id           Int     @id @default(autoincrement())
  fileURL      String
  fileName     String?
  taskId       Int?
  uploadedById String
  commentId    Int?

  task       Task?    @relation(fields: [taskId], references: [id])
  uploadedBy User     @relation(fields: [uploadedById], references: [email])
  comment    Comment? @relation(fields: [commentId], references: [id])
}

model Comment {
  id          Int          @id @default(autoincrement())
  text        String
  taskId      Int
  userId      String
  attachments Attachment[]

  task Task @relation(fields: [taskId], references: [id])
  user User @relation(fields: [userId], references: [email])
}
